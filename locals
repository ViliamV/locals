#!/usr/bin/env bash

LOCALS_FILENAME="${LOCALS_FILENAME:-.locals}"
LOCALS_LEAVE_FILENAME="${LOCALS_LEAVE_FILENAME:-.locals.leave}"

function __locals_parse_aliases_names() { sed -n 's/^alias \([^=]*\)=.*/\1/p' "$1" ; }

function __locals_parse_env_names() { sed -n 's/^export \([^=]*\)=.*/\1/p' "$1" ; }

function __locals_info() {
  mapfile -t < <("$1" "$2")
  if [[ ${#MAPFILE[@]} -gt 0 ]]; then
    printf "$(tput setaf 8)%s " "$3"
    local IFS=' '
    printf "$(tput bold)%s$(tput sgr0)\n" "${MAPFILE[*]}"
  fi
}

function __locals_env_info() { __locals_info "__locals_parse_env_names" "${1:-$LOCALS_FILENAME}" "${2:-env}" ; }

function __locals_alias_info() { __locals_info "__locals_parse_aliases_names" "${1:-$LOCALS_FILENAME}" "${2:-local}" ; }

function __locals_verbose() { __locals_alias_info ; __locals_env_info ; }

function __locals_debug() { __locals_alias_info "$1" "unalias" ; __locals_env_info "$1" "unset" ; }

function __locals_load() {
  if [[ -f "$LOCALS_FILENAME" ]]; then
    source "$LOCALS_FILENAME"
    [[ -n "$LOCALS_VERBOSE" ]] && __locals_verbose
  fi
  return 0
}

function __locals_unload() {
  local prev_locals="$OLDPWD/$LOCALS_FILENAME"
  if [[ -f "$prev_locals" ]] ; then
    for key in $(__locals_parse_aliases_names "$prev_locals"); do
      unalias "$key" > /dev/null 2>&1
    done
    for key in $(__locals_parse_env_names "$prev_locals"); do
      unset "$key" > /dev/null 2>&1
    done
    [[ -n "$LOCALS_DEBUG" ]] && __locals_debug "$prev_locals"
  fi
  local prev_locals_leave="$OLDPWD/$LOCALS_LEAVE_FILENAME"
  if [[ -f "$prev_locals_leave" ]]; then
    source "$prev_locals_leave"
    [[ -n "$LOCALS_DEBUG" ]] && __locals_info echo "$prev_locals_leave" "executed"
  fi
  return 0
}

function __locals_on_enter() {
  __locals_unload
  __locals_load
  [[ -n "$LOCALS_HOOK" ]] && "$LOCALS_HOOK"
  return 0
}

function cd() {
  builtin cd "$@" || exit
  __locals_on_enter
}

function locals() {
  case $1 in
    "" | edit) [[ -n "$EDITOR" ]] && "$EDITOR" "$LOCALS_FILENAME" && __locals_on_enter ;;
    leave) [[ -n "$EDITOR" ]] && "$EDITOR" "$LOCALS_LEAVE_FILENAME" ;;
    print) [[ -f "$LOCALS_FILENAME" ]] && __locals_verbose ;;
    refresh) local OLDPWD="$PWD" ; __locals_on_enter ;;
    *) echo "TODO - sorry for now"
  esac
}
complete -W "edit leave print refresh" locals


# Load locals when sourcing this file
__locals_load
